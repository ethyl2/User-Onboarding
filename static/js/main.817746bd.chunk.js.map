{"version":3,"sources":["components/UserCard.js","components/UserList.js","components/UserForm.js","App.js","serviceWorker.js","index.js"],"names":["StyledCard","styled","div","UserCard","user","customColor","style","background","username","role","email","UserBox","colorArray","UserList","props","users","map","index","key","length","FormBox","FormikUserForm","withFormik","mapPropsToValues","password","tos","validationSchema","Yup","shape","min","max","required","oneOf","handleSubmit","values","setStatus","axios","post","then","res","console","log","data","catch","err","response","errors","touched","status","useState","setUsers","useEffect","htmlFor","type","name","placeholder","validate","value","error","test","as","disabled","checked","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.817746bd.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\n\r\nconst StyledCard = styled.div`\r\n    width: 32vw;\r\n    max-height: 32vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-bottom: 1rem;\r\n    border-radius: 4px;\r\n    padding: 1rem;\r\n`\r\n\r\nconst UserCard = ({ user, customColor }) => {\r\n\r\n    return (\r\n        <StyledCard style={{ background: customColor }}>\r\n            <h2>{user.username}</h2>\r\n            <h3>{user.role}</h3>\r\n            <p>{user.email}</p>\r\n        </StyledCard>\r\n    )\r\n}\r\n\r\nexport default UserCard;","import React from 'react';\r\nimport UserCard from './UserCard';\r\nimport styled from 'styled-components';\r\n\r\nconst UserBox = styled.div`\r\n    height: 75vh;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: space-between;\r\n    align-items: stretch;\r\n    align-content: center;\r\n    margin: 2rem;\r\n`\r\nconst colorArray = [ '#F1CE44', '#A4456A', '#FE902A', '#5C802D', '#89906F', '#ECA37B', '#276A59'];\r\n\r\nconst UserList = (props) => {\r\n    return (\r\n        <UserBox>\r\n            {props.users.map((user, index) => {\r\n                return <UserCard user={user} \r\n                    key={user.username} \r\n                    customColor={colorArray[index%colorArray.length]}/>\r\n            })}\r\n        </UserBox>\r\n    )\r\n}\r\n\r\nexport default UserList;","import React, { useState, useEffect } from 'react';\r\nimport { withFormik, Form, Field } from 'formik';\r\nimport axios from 'axios';\r\nimport * as Yup from 'yup';\r\nimport styled from 'styled-components';\r\nimport UserList from './UserList';\r\n\r\nconst FormBox = styled.div`\r\n    width: 33vw;\r\n    background: #8EC68A;\r\n    margin: 0 auto 3rem auto;\r\n    padding: 1rem 2rem 2rem 2rem;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: stretch;\r\n    align-items: stretch;\r\n`;\r\n/*\r\nWe want to create a form to onboard a new user to our system. \r\nWe need at least the following pieces of information about our new user:\r\n\r\n    Name\r\n    Email\r\n    Password\r\n    Terms of Service (checkbox)\r\n    A Submit button to send our form data to the server.\r\n\r\n*/\r\n\r\nconst UserForm =({ values, errors, touched, status}) => {\r\n\r\n    //Set up a state property called users that is initialized with an empty array\r\n    const [users, setUsers] = useState([]);\r\n\r\n    /*\r\n    Every time you make a POST request, and get that new user data back, \r\n    update your user's state with the new user added to the array */\r\n    useEffect(() => {\r\n        status && setUsers(users => [...users, status]);\r\n    }, [status]);\r\n    \r\n    /*\r\n    Stretch: Add to your existing handling so that,\r\n     if a user inputs their email as waffle@syrup.com, \r\n     they receive an error message in their form that says \r\n     \"That email is already taken.\" */\r\n     \r\n    function validateEmail(value) {\r\n        let error;\r\n        if (!value) {\r\n          error = 'Required';\r\n        } else if (value === 'waffle@syrup.com') {\r\n            error = 'That email is already taken';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n          error = 'Invalid email address';\r\n        }\r\n        return error;\r\n      }\r\n    \r\n    /* Implement a dropdown menu in your Formik form. Add a role value to your \r\n    Formik HOC and add a dropdown with different roles for your users.\r\n    */\r\n    return(\r\n        <div>\r\n            <FormBox>\r\n            <h1>Add User</h1>\r\n            <Form>\r\n                <label htmlFor='username'>Username: </label>\r\n                <Field type='text' name='username' placeholder='name' />\r\n                {touched.username && errors.username && (<p>{errors.username}</p>)}\r\n                <br />\r\n\r\n                <label htmlFor='email'>Email: </label>\r\n                <Field type='email' name='email' placeholder='email' validate={validateEmail}  />\r\n                {touched.email && errors.email && (<p>{errors.email}</p>)}\r\n                <br />\r\n\r\n                <label htmlFor='password'>Password: </label>\r\n                <Field type='password' name='password' placeholder='password'/>\r\n                {touched.password && errors.password && (<p>{errors.password}</p>)}\r\n                <br />\r\n\r\n                <label htmlFor='role'>Role: </label>\r\n                <Field as='select' name='role'>\r\n                    <option disabled value=''>Select your role:</option>\r\n                    <option value='Executive Chef'>Executive Chef</option>\r\n                    <option value='Sous Chef'>Sous-Chef de cuisine</option>\r\n                    <option value='Pastry Chef'>Pastry Chef</option> \r\n                    <option value='Food Critic'>Food Critic</option>\r\n                    <option value='Food Blogger'>Food Blogger</option>              \r\n                    <option value='Food Photographer'>Food Photographer</option>\r\n                    <option value='Foodie'>Foodie</option>\r\n                    <option value='Health Inspector'>Health Inspector</option>\r\n                    <option value='Regular Customer'>Regular Customer</option>\r\n                    <option value='First-Time Customer'>First-Time Customer</option>\r\n                    <option value='Supplier'>Supplier</option>\r\n                    <option value='Manager'>Manager</option>\r\n                    <option value='Line Cook'>Line Cook</option>\r\n                    <option value='Server'>Server</option>\r\n                    <option value='Host/Hostess'>Host/Hostess</option>\r\n                    <option value='Other'>Other</option>\r\n                </Field><br />\r\n\r\n                <label htmlFor='tos'>Accept Terms of Service </label>\r\n                <Field type='checkbox' name='tos' checked={values.tos} />\r\n                {touched.tos&& errors.tos && (<p>{errors.tos}</p>)}\r\n                <br />\r\n\r\n                <button type='submit'>Submit User</button>\r\n            </Form>\r\n            </FormBox>\r\n            <UserList users={users} />\r\n            \r\n        </div>\r\n    )\r\n};\r\n\r\nconst FormikUserForm = withFormik({\r\n    mapPropsToValues({ username, email, password, role, tos }) {\r\n        return {\r\n          username: username || '',\r\n          email: email || '',\r\n          password: password || '',\r\n          tos: tos || false,\r\n          role: role || ''\r\n        };\r\n    },\r\n    /*Using Yup, set up at least two different validations for each field \r\n    along with custom error codes that will display on screen when validation \r\n    fails. */\r\n    validationSchema: Yup.object().shape({\r\n        username: Yup.string().min(2, 'Username is too short')\r\n        .max(50, 'Username is too long')\r\n        .required('Username is required here'),\r\n        email: Yup.string()\r\n        .email('Invalid email')\r\n        .required('Email is required here'),\r\n        password: Yup.string()\r\n        .min(6, 'Password is too short')\r\n        .max(50, 'Password is too long')\r\n        .required('Password is required here'),\r\n        tos: Yup.bool().oneOf([true], 'You must agree to the Terms of Service to continue')\r\n    }),\r\n\r\n    /* \r\n    Craft a POST request using axios that sends your form data to the \r\n    following endpoint: https://reqres.in/api/users\r\n    Verify using a console.log() that you are receiving a successful \r\n    response back\r\n    */\r\n       \r\n    handleSubmit(values, { setStatus }) {\r\n           axios.post('https://reqres.in/api/users', values)\r\n           .then(res => {\r\n               console.log(res);\r\n               setStatus(res.data);\r\n           })\r\n           .catch(err => console.log(err.response));\r\n       }\r\n})(UserForm);\r\n\r\nexport default FormikUserForm;","import React from 'react';\r\nimport './App.css';\r\nimport UserForm from './components/UserForm';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <UserForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}